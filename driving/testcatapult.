#pragma config(Sensor, port1,  gyro,           sensorVexIQ_Gyro)
#pragma config(Sensor, port5,  bumper,         sensorVexIQ_Touch)
#pragma config(Motor,  motor7,          L,             tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor8,          in,            tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor9,          c1,            tmotorVexIQ, PIDControl, reversed, encoder)
#pragma config(Motor,  motor10,         c2,            tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor11,         H,             tmotorVexIQ, PIDControl, reversed, encoder)
#pragma config(Motor,  motor12,         R,             tmotorVexIQ, PIDControl, reversed, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

task main()
{
	int thingval=0;
	while(true)
	{
		//driving
		motor[R] = vexRT(ChA);
		motor[L] = vexRT(ChD);

		//intake
		if(vexRT(BtnRDown) == 1){setMultipleMotors(127,H,in);}
		if(vexRT(BtnLDown) == 1){setMultipleMotors(-127,H,in);}
		if(vexRT(BtnRDown)==0 && vexRT(BtnLDown)==0){setMultipleMotors(0,H,in);}


		//catapult
		int dval=getBumperValue(bumper);
		if(dval==1&&(vexRT(BtnFDown)!=1)){
			stopMultipleMotors(c1,c2);
			thingval=0;
		}
		if(vexRT(BtnFDown)==1){thingval=1;}
		
		if(vexRT(BtnFUp)&&thingval==1){
			setMultipleMotors(127,c1,c2);
		}else{
			setMultipleMotors(0,c1,c2);
		}

		/*
		//distancestuff
		setTouchLEDColor(light,colorRed);
		vald = getDistanceValue(distance);
		if(vald>120&vald<150){
		setTouchLEDColor(light,colorGreen);
		}
		*/
		//end of code
	}
}
	


